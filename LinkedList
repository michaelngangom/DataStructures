/**
 * 
 */
package com.linkedlistLL;

import com.linkedlist.Link;

/**
 * @author Mike
 *
 */
public class LinkListTest {
	public static void main(String[] args) {
		LinkList list = new LinkList();
		list.addFront("D");
		list.addFront("B");
		list.addFront("A");

		// list.addLast("D");
		//
		// list.remove("C");
		//
		// list.removeFirst();
		//
		// list.reverse();
		//
		// list.display();

		list.inserInSorted("C");
		list.display();
		System.out.println("Size is " + list.count());
	}

}

/*
 * Node class
 */
class Node {
	String data;
	Node next;

	Node(String d) {
		this.data = d;
		next = null;
	}

	public String toString() {
		return this.data;
	}

}

/*
 * Linked List implementation
 */
class LinkList {
	/**
	 * 
	 */
	Node head;

	public LinkList() {
		head = null;

	}

	/*
	 * Add node at the end - normal adding
	 */
	public void addLast(String s) {
		Node newNode = new Node(s);
		Node currNode = head;
		if (currNode != null) {
			while (currNode.next != null) {
				currNode = currNode.next;
			}
			currNode.next = newNode;
		} else {
			System.out.println("Empty List");
		}
	}

	/*
	 * Add Node at the front
	 */
	public void addFront(String s) {
		Node newNode = new Node(s);
		newNode.next = head;
		head = newNode;

	}

	/*
	 * remove the first element from the list
	 */
	public void removeFirst() {
		Node currNode = head;
		currNode = currNode.next;
		head = currNode;

	}

	/*
	 * finding an element and removing it
	 */
	public void remove(String s) {
		Node previous = head;
		Node currNode = head;

		while (!(currNode.data == s)) {
			if (currNode.next == null) {
				System.out.println("not found");
			} else {
				previous = currNode;
				currNode = currNode.next;
			}
		}
		if (currNode == head) {
			currNode = currNode.next;
			head = currNode;
		} else {
			previous.next = currNode.next;
		}
	}

	public int count() {
		int count = 0;
		Node currNode = head;
		if (head != null) {
			while (currNode != null) {
				count++;
				currNode = currNode.next;
			}
			return count;
		} else
			return 0;
	}

	public void display() {
		Node currNode = head;
		if (currNode != null) {
			while (currNode != null) {
				System.out.println(currNode.data);
				currNode = currNode.next;
			}

		} else {
			System.out.println("empty Link");
		}
	}

	/*
	 * To reverse the LinkedList
	 */
	public void reverse() {
		Node reverseList = null;
		Node currNode = head;
		while (currNode != null) {
			Node tempLink = currNode.next;
			currNode.next = reverseList;
			reverseList = currNode;
			currNode = tempLink;
		}
		head = reverseList;
	}

	/*
	 * 
	 */
	public void inserInSorted(String s) {
		Node previous = head;
		Node current = head;
		while (current != null) {
			if (current.data != null) {
				if (current.data.compareTo(s) > 0) {
					Node newLink = new Node(s);
					previous.next = newLink;
					newLink.next = current;
					break;
				}
				previous = current;
				current = current.next;
			}
		}

	}
}
